[{"/Users/leowong/Documents/JS/hk-transport-display/src/index.js":"1","/Users/leowong/Documents/JS/hk-transport-display/src/App.js":"2","/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js":"3","/Users/leowong/Documents/JS/hk-transport-display/src/Header.js":"4","/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js":"5","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js":"6","/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js":"7","/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js":"8","/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js":"9","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js":"10","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js":"11","/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js":"12","/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js":"13","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js":"14"},{"size":1078,"mtime":1624375293529,"results":"15","hashOfConfig":"16"},{"size":928,"mtime":1624375559671,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1624375293530,"results":"18","hashOfConfig":"16"},{"size":5116,"mtime":1624379387348,"results":"19","hashOfConfig":"16"},{"size":6197,"mtime":1624375293524,"results":"20","hashOfConfig":"16"},{"size":4583,"mtime":1624378417504,"results":"21","hashOfConfig":"16"},{"size":609,"mtime":1624375293526,"results":"22","hashOfConfig":"16"},{"size":6684,"mtime":1624379391703,"results":"23","hashOfConfig":"16"},{"size":6911,"mtime":1624375293525,"results":"24","hashOfConfig":"16"},{"size":8843,"mtime":1624379392528,"results":"25","hashOfConfig":"16"},{"size":7013,"mtime":1624378640324,"results":"26","hashOfConfig":"16"},{"size":5284,"mtime":1624375293530,"results":"27","hashOfConfig":"16"},{"size":2121,"mtime":1624379393284,"results":"28","hashOfConfig":"16"},{"size":5652,"mtime":1624379390942,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"e7sjwq",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/Users/leowong/Documents/JS/hk-transport-display/src/index.js",["68"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport { onServiceWorkerUpdate } from \"@3m1/service-worker-updater\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: () => {\n    const reloadMsg = window.confirm(\n      \"偵測到新版本，更新中。New Version Detected, Updating.\"\n    );\n    reloadMsg && window.location.reload();\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["69","70"],"/Users/leowong/Documents/JS/hk-transport-display/src/App.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/Header.js",["71","72"],"import {\n  AppBar,\n  Button,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  makeStyles,\n  Toolbar,\n  Typography,\n  useTheme,\n  ClickAwayListener,\n} from \"@material-ui/core\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nimport TrainIcon from \"@material-ui/icons/Train\";\nimport \"./css/Header.css\";\nimport { Link } from \"react-router-dom\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport TramIcon from \"@material-ui/icons/Tram\";\nimport appInfo from \"../package.json\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nfunction Header() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleUpdateApp = () => {\n    window.location.reload();\n  };\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"header\">\n      <AppBar position=\"static\" className=\"header__appBar\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className=\"header__iconBtn\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className=\"header__title\">\n            香港鐵路資訊 HK Railway Info\n          </Typography>\n\n          <Chip\n            size=\"small\"\n            color=\"secondary\"\n            label=\"Beta!\"\n            className=\"header__chip\"\n          />\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"temporary\"\n        anchor=\"left\"\n        open={open}\n        onClose={handleDrawerClose}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/\" onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              主頁 Home\n            </Link>\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/lrt\" onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <TramIcon />\n              </ListItemIcon>\n              輕鐵 Light Rail\n            </Link>\n          </ListItem>\n          <ListItem>\n            <Link to=\"/mtr\" onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <TrainIcon />\n              </ListItemIcon>\n              市區線 Urban Lines\n            </Link>\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem>Version: {appInfo.version}</ListItem>\n          <ListItem>\n            <a\n              href=\"http://dubdub.pro/\"\n              target=\"_blank\"\n              onClick={handleDrawerClose}\n            >\n              DubDub Production\n            </a>\n          </ListItem>\n          <ListItem>\n            <Button color=\"secondary\" onClick={handleUpdateApp}>\n              Refresh App\n            </Button>\n          </ListItem>\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js",["73"],"import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Dict from \"./component/LRT_Dict.js\";\nimport LrtInfo from \"./component/LrtInfo.js\";\nimport \"./css/LRT.css\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LRTLogo from \"./img/LR_old.png\";\nimport GTranslateOutlinedIcon from \"@material-ui/icons/GTranslateOutlined\";\n\nfunction LRT() {\n  const [station, setStation] = useState(\"\");\n  const [lrtZone, setLrtZone] = useState(\"\");\n  const [lrtRoute, setLrtRoute] = useState(\"\");\n  const [swapLang, setSwapLang] = useState(false);\n  const [optionSelected, setOptionSelected] = useState(\"\");\n  const [lang, setLang] = useState(\"tc\");\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n\n  if (swapLang === true) {\n    setTimeout(() => {\n      if (lang === \"en\") {\n        setLang(\"tc\");\n      } else {\n        setLang(\"en\");\n      }\n    }, 8000);\n  }\n\n  const handleZone = (e) => {\n    setStation(\"\");\n    setLrtZone(e.target.value);\n    setLrtRoute(\"\");\n    setOptionSelected(\"zone\");\n  };\n\n  const handleRoute = (e) => {\n    setStation(\"\");\n    setLrtZone(\"\");\n    setLrtRoute(e.target.value);\n    setOptionSelected(\"route\");\n  };\n\n  const handleStation = (e) => {\n    setStation(e.target.value);\n  };\n\n  function DisplayStation(props) {\n    if (optionSelected === \"zone\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtZoneStation[lrtZone]?.map((sid) => (\n              <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else if (optionSelected === \"route\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtRoutes[lrtRoute]?.map((sid) => (\n              <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n            disabled\n          />\n        </FormControl>\n      );\n    }\n  }\n\n  return (\n    <div className=\"lrt\">\n      <div className=\"container\">\n        <div className=\"lrt__header\">\n          <div className=\"lrt__logo\">\n            <img src={LRTLogo} alt=\"Light Rail Logo\" />\n          </div>\n          <div className=\"lrt__title\">{Dict.lrtCommon[lang].title}</div>\n        </div>\n        <div className=\"lrt__topBar\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color={swapLang === true ? \"secondary\" : \"primary\"}\n            className=\"langButton\"\n            startIcon={<GTranslateOutlinedIcon />}\n            onClick={\n              swapLang === true\n                ? () => setSwapLang(false)\n                : () => setSwapLang(true)\n            }\n          >\n            <small>\n              {swapLang === true\n                ? Dict.lrtCommon[lang].autoBtnOff\n                : Dict.lrtCommon[lang].autoBtnOn}\n            </small>\n          </Button>\n          <div style={{ flex: \"1 0 0\" }} />\n          <Button\n            onClick={() => setLang(\"en\")}\n            disabled={lang === \"en\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            English\n          </Button>\n          <Button\n            onClick={() => setLang(\"tc\")}\n            disabled={lang === \"tc\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            中文\n          </Button>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <FormControl className=\"zoneSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].zone}</InputLabel>\n            <Select\n              value={lrtZone || \"\"}\n              onChange={handleZone}\n              label=\"Zone\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtZoneName[lang]).map(([id, name]) => (\n                <MenuItem value={id}>{name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className=\"routeSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].route}</InputLabel>\n            <Select\n              value={lrtRoute || \"\"}\n              onChange={handleRoute}\n              label=\"Route\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtRoutes).map(([id, name]) => (\n                <MenuItem value={id}>{id}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <DisplayStation />\n          <FormControl className=\"saveStnSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].saveStation}</InputLabel>\n            <Select\n              value={station || \"\"}\n              onChange={handleStation}\n              label=\"Station\"\n              fullWidth\n            >\n              {lrtStationArray?.map((sid) => (\n                <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"lrt__container\">\n          {station !== \"\" ? <LrtInfo sid={station} lang={lang} /> : \"\"}\n        </div>\n        <div className=\"lrt__info\">\n          <Alert severity=\"info\">{Dict.lrtCommon[lang].etaAlert}</Alert>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LRT;\n","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js",["74"],"const lrtCommon = {\n  en: {\n    stn: \"Light Rail Station\",\n    plat: \"Platform\",\n    select: \"Please Select\",\n    etaAlert:\n      \"ETA information will be refresh every 10 seconds, reference data only.\",\n    autoBtnOn: \"Auto swap\",\n    autoBtnOff: \"Auto swap\",\n    title: \"Light Rail ETA\",\n    lastUpdate: \"Last Update\",\n    stopped: \"Not In Service\",\n    end_service: \"End of today's service\",\n    zone: \"Fare Zone\",\n    route: \"Route\",\n    saveStation: \"Saved Light Rail Station\",\n    saveFalse: \"Save\",\n    saveTrue: \"Saved\",\n  },\n  tc: {\n    stn: \"輕鐵站\",\n    plat: \"月台\",\n    select: \"請選擇\",\n    etaAlert: \"到站時間資訊每10秒自動更新，資料只供參考。\",\n    autoBtnOn: \"自動轉\",\n    autoBtnOff: \"自動轉\",\n    title: \"輕鐵 到站時間\",\n    lastUpdate: \"最後更新\",\n    stopped: \"不載客\",\n    end_service: \"本日服務完結\",\n    zone: \"收費區\",\n    route: \"路線\",\n    saveStation: \"已儲存輕鐵站\",\n    saveFalse: \"儲存\",\n    saveTrue: \"已儲存\",\n  },\n};\n\nconst lrtStation = {\n  en: {\n    1: \"Tuen Mun Ferry Pier\",\n    10: \"Melody Garden\",\n    15: \"Butterfly\",\n    20: \"Light Rail Depot\",\n    30: \"Lung Mun\",\n    40: \"Tsing Shan Tsuen\",\n    50: \"Tsing Wun\",\n    60: \"Kin On\",\n    70: \"Ho Tin\",\n    75: \"Choy Yee Bridge\",\n    80: \"Affluence\",\n    90: \"Tuen Mun Hospital\",\n    100: \"Siu Hong\",\n    110: \"Kei Lun\",\n    120: \"Ching Chung\",\n    130: \"Kin Sang\",\n    140: \"Tin King\",\n    150: \"Leung King\",\n    160: \"San Wai\",\n    170: \"Shek Pai\",\n    180: \"Shan King (North)\",\n    190: \"Shan King (South)\",\n    200: \"Ming Kum\",\n    212: \"Tai Hing (North)\",\n    220: \"Tai Hing (South)\",\n    230: \"Ngan Wai\",\n    240: \"Siu Hei\",\n    250: \"Tuen Mun Swimming Pool\",\n    260: \"Goodview Garden\",\n    265: \"Siu Lun\",\n    270: \"On Ting\",\n    275: \"Yau Oi\",\n    280: \"Town Centre\",\n    295: \"Tuen Mun\",\n    300: \"Pui To\",\n    310: \"Hoh Fuk Tong\",\n    320: \"San Hui\",\n    330: \"Prime View\",\n    340: \"Fung Tei\",\n    350: \"Lam Tei\",\n    360: \"Nai Wai\",\n    370: \"Chung Uk Tsuen\",\n    380: \"Hung Shui Kiu\",\n    390: \"Tong Fong Tsuen\",\n    400: \"Ping Shan\",\n    425: \"Hang Mei Tsuen\",\n    430: \"Tin Shui Wai\",\n    435: \"Tin Tsz\",\n    445: \"Tin Yiu\",\n    448: \"Locwood\",\n    450: \"Tin Wu\",\n    455: \"Ginza\",\n    460: \"Tin Shui\",\n    468: \"Chung Fu\",\n    480: \"Tin Fu\",\n    490: \"Chestwood\",\n    500: \"Tin Wing\",\n    510: \"Tin Yuet\",\n    520: \"Tin Sau\",\n    530: \"Wetland Park\",\n    540: \"Tin Heng\",\n    550: \"Tin Yat\",\n    560: \"Shui Pin Wai\",\n    570: \"Fung Nin Road\",\n    580: \"Hong Lok Road\",\n    590: \"Tai Tong Road\",\n    600: \"Yuen Long\",\n    920: \"Sam Shing\",\n  },\n  tc: {\n    1: \"屯門碼頭\",\n    10: \"美樂\",\n    15: \"蝴蝶\",\n    20: \"輕鐵車廠\",\n    30: \"龍門\",\n    40: \"青山村\",\n    50: \"青雲\",\n    60: \"建安\",\n    70: \"河田\",\n    75: \"蔡意橋\",\n    80: \"澤豐\",\n    90: \"屯門醫院\",\n    100: \"兆康\",\n    110: \"麒麟\",\n    120: \"青松\",\n    130: \"建生\",\n    140: \"田景\",\n    150: \"良景\",\n    160: \"新圍\",\n    170: \"石排\",\n    180: \"山景 (北)\",\n    190: \"山景 (南)\",\n    200: \"鳴琴\",\n    212: \"大興 (北)\",\n    220: \"大興 (南)\",\n    230: \"銀圍\",\n    240: \"兆禧\",\n    250: \"屯門泳池\",\n    260: \"豐景園\",\n    265: \"兆麟\",\n    270: \"安定\",\n    275: \"友愛\",\n    280: \"市中心\",\n    295: \"屯門\",\n    300: \"杯渡\",\n    310: \"何福堂\",\n    320: \"新墟\",\n    330: \"景峰\",\n    340: \"鳳地\",\n    350: \"藍地\",\n    360: \"泥圍\",\n    370: \"鍾屋村\",\n    380: \"洪水橋\",\n    390: \"塘坊村\",\n    400: \"屏山\",\n    425: \"坑尾村\",\n    430: \"天水圍\",\n    435: \"天慈\",\n    445: \"天耀\",\n    448: \"樂湖\",\n    450: \"天湖\",\n    455: \"銀座\",\n    460: \"天瑞\",\n    468: \"頌富\",\n    480: \"天富\",\n    490: \"翠湖\",\n    500: \"天榮\",\n    510: \"天悅\",\n    520: \"天秀\",\n    530: \"濕地公園\",\n    540: \"天恒\",\n    550: \"天逸\",\n    560: \"水邊圍\",\n    570: \"豐年路\",\n    580: \"康樂路\",\n    590: \"大棠路\",\n    600: \"元朗\",\n    920: \"三聖\",\n  },\n};\n\nconst lrtZoneName = {\n  en: {\n    z1: \"Zone 1\",\n    z2: \"Zone 2\",\n    z3: \"Zone 3\",\n    z4: \"Zone 4\",\n    z5: \"Zone 5\",\n    z5a: \"Zone 5A\",\n  },\n  tc: {\n    z1: \"第1區\",\n    z2: \"第2區\",\n    z3: \"第3區\",\n    z4: \"第4區\",\n    z5: \"第5區\",\n    z5a: \"第5A區\",\n  },\n};\n\nconst lrtZoneStation = {\n  z1: [1, 10, 15, 20, 30, 240, 250, 260, 265, 920],\n  z2: [\n    40,\n    50,\n    60,\n    70,\n    75,\n    80,\n    170,\n    180,\n    190,\n    200,\n    212,\n    220,\n    230,\n    270,\n    275,\n    280,\n    295,\n    300,\n    310,\n    320,\n    330,\n  ],\n  z3: [90, 100, 110, 120, 130, 140, 150, 160, 340, 350, 360, 370],\n  z4: [380, 390, 400, 425, 430, 435, 445, 448, 450, 455, 460, 490, 500],\n  z5: [560, 570, 580, 590, 600],\n  z5a: [468, 480, 510, 520, 530, 540, 550],\n};\n\nconst lrtRoutes = {\n  505: [100, 120, 130, 140, 150, 160, 170, 200, 60, 295, 280, 270, 265, 920],\n  507: [140, 150, 160, 212, 220, 230, 75, 70, 295, 270, 265, 260, 250, 1],\n  610: [\n    1,\n    10,\n    15,\n    20,\n    30,\n    40,\n    50,\n    200,\n    170,\n    212,\n    220,\n    230,\n    80,\n    90,\n    100,\n    350,\n    260,\n    270,\n    380,\n    390,\n    400,\n    560,\n    570,\n    580,\n    590,\n    600,\n  ],\n  614: [\n    1,\n    240,\n    250,\n    260,\n    265,\n    270,\n    280,\n    300,\n    310,\n    320,\n    330,\n    340,\n    100,\n    350,\n    360,\n    370,\n    380,\n    390,\n    400,\n    560,\n    570,\n    580,\n    590,\n    600,\n  ],\n  \"614P\": [1, 240, 250, 260, 265, 270, 280, 300, 310, 320, 330, 340, 100],\n  615: [\n    1,\n    10,\n    15,\n    20,\n    30,\n    40,\n    50,\n    200,\n    170,\n    160,\n    150,\n    140,\n    130,\n    120,\n    110,\n    100,\n    350,\n    360,\n    370,\n    380,\n    390,\n    400,\n    560,\n    570,\n    580,\n    590,\n    600,\n  ],\n  \"615P\": [\n    1,\n    10,\n    15,\n    20,\n    30,\n    40,\n    50,\n    200,\n    170,\n    160,\n    150,\n    140,\n    130,\n    120,\n    110,\n    100,\n  ],\n  705: [\n    430,\n    435,\n    450,\n    455,\n    500,\n    510,\n    520,\n    530,\n    540,\n    550,\n    480,\n    468,\n    460,\n    448,\n    445,\n  ],\n  706: [\n    430,\n    445,\n    448,\n    460,\n    468,\n    480,\n    550,\n    540,\n    530,\n    520,\n    510,\n    500,\n    455,\n    450,\n    435,\n  ],\n  751: [\n    550,\n    480,\n    468,\n    490,\n    500,\n    455,\n    450,\n    435,\n    430,\n    425,\n    380,\n    370,\n    360,\n    350,\n    100,\n    90,\n    75,\n    295,\n    270,\n    275,\n  ],\n  \"751P\": [400, 435, 450, 455, 500, 490, 468, 480, 550],\n  \"761P\": [\n    550,\n    480,\n    468,\n    460,\n    448,\n    445,\n    425,\n    390,\n    400,\n    560,\n    570,\n    580,\n    590,\n    600,\n  ],\n};\n\nexport default {\n  lrtStation,\n  lrtCommon,\n  lrtZoneName,\n  lrtZoneStation,\n  lrtRoutes,\n};\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js",["75"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardContent, Chip, Button } from \"@material-ui/core\";\nimport Dict from \"./LRT_Dict.js\";\nimport \"../css/LRTInfo.css\";\nimport LRTTrain from \"../img/lrt_train.png\";\nimport Save from \"@material-ui/icons/StarBorder\";\nimport Saved from \"@material-ui/icons/Star\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction LrtInfo({ sid, lang }) {\n  const [lrtETA, setLRTEta] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [lrtStnSaved, setLrtStnSaved] = useState(false);\n  var { fLang } = \"\";\n\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n  if (storage.getItem(\"LrtSaveStn\") === null) {\n    var newArray = [];\n    storage.setItem(\"LrtSaveStn\", JSON.stringify(newArray));\n  }\n\n  //storage.clear();\n\n  if (lang === \"tc\") {\n    fLang = \"ch\";\n  } else {\n    fLang = lang;\n  }\n\n  useEffect(() => {\n    //setIsLoading(true);\n    const inteval = setInterval(() => {\n      let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n      axios\n        .get(lrtAPI)\n        .then((res) => {\n          setLRTEta(res.data);\n          // setIsLoading(false);\n        })\n        .catch((error) => console.log(error));\n    }, 10000);\n    return () => clearInterval(inteval);\n  }, [sid]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setLRTEta();\n    let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n    axios\n      .get(lrtAPI)\n      .then((res) => {\n        setLRTEta(res.data);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n    var checkSave = lrtStationArray?.indexOf(sid);\n    if (checkSave === -1 || lrtStationArray === null) {\n      setLrtStnSaved(false);\n    } else {\n      setLrtStnSaved(true);\n    }\n  }, [sid]);\n\n  const handleLocalStorage = (sid) => {\n    if (lrtStnSaved === false) {\n      lrtStationArray.push(sid);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(true);\n    } else {\n      let findSID = lrtStationArray?.indexOf(sid);\n      lrtStationArray.splice(findSID, 1);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(false);\n    }\n  };\n\n  if (lrtETA?.status === 0) {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          <CardContent>\n            <p>未能讀取到站時間，請稍後再嘗試。</p>\n            <p>Cannnot Retrieve ETA information, Please try again later.</p>\n            <p align=\"center\">\n              <font size=\"1\">\n                <i>API Capture Failed</i>\n              </font>\n            </p>\n          </CardContent>\n          <CardContent>\n            {lrtETA?.system_time ? (\n              <div className=\"etaBox__footer\">\n                {Dict.lrtCommon[lang].lastUpdate + \": \" + lrtETA?.system_time}\n              </div>\n            ) : (\n              \"\"\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          {lrtETA?.platform_list.map((plat) => (\n            <CardContent>\n              <div className=\"station__header\">\n                <div className=\"station__platform\">{plat.platform_id}</div>\n                <div className=\"station__name\"> {Dict.lrtStation.tc[sid]}</div>\n                <div className=\"station__name\">\n                  <small>{Dict.lrtStation.en[sid]}</small>\n                </div>\n              </div>\n              {plat.end_service_status === 1 ? (\n                <div className=\"etaBox\">\n                  <div className=\"lrt__route\"></div>\n                  <div className=\"etaBox__row\">\n                    <small>{Dict.lrtCommon[lang].end_service}</small>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n              {plat.route_list?.map((train) =>\n                train.stop !== 1 ? (\n                  <div className=\"etaBox\">\n                    <div className={\"lrt__route_\" + train.route_no}>\n                      <Chip\n                        size=\"small\"\n                        className=\"lrtChip\"\n                        style={{\n                          backgroundColor: \"white\",\n                          color: \"black\",\n                          width: \"50px\",\n                        }}\n                        label={train.route_no}\n                      />\n                    </div>\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"dest_\" + fLang]}</small>\n                    </div>\n                    <div style={{ flex: \"1 0 0\" }} />\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"time_\" + fLang]}</small>\n                    </div>\n                    <div className=\"lrtTrain__length\">\n                      {Array(train.train_length)\n                        .fill()\n                        .map((_, i) => (\n                          <img src={LRTTrain} alt=\"Light Rail Cab\" />\n                        ))}\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )}\n            </CardContent>\n          ))}\n          {lrtETA?.system_time ? (\n            <div className=\"etaBox__footer\">\n              {Dict.lrtCommon[lang].lastUpdate + \": \" + lrtETA?.system_time}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default LrtInfo;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js",["76"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardContent, Button } from \"@material-ui/core\";\nimport Dict from \"./MTR_Dict.js\";\nimport \"../css/MTRInfo.css\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Save from \"@material-ui/icons/StarBorder\";\nimport Saved from \"@material-ui/icons/Star\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction MTRInfo({ line, station, lang }) {\n  const [mtrEta, setMtrEta] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [mtrIsDelay, setMtrIsDelay] = useState(\"\");\n  const [mtrStatus, setMtrStatus] = useState(\"\");\n  const [stnSaved, setStnSaved] = useState(false);\n\n  const storage = window.localStorage;\n  const saveStationsArray = JSON.parse(storage.getItem(line + \"_SaveStn\"));\n  if (storage.getItem(line + \"_SaveStn\") === null) {\n    var newArray = [];\n    storage.setItem(line + \"_SaveStn\", JSON.stringify(newArray));\n  }\n\n  const handleLocalStorage = (station) => {\n    if (stnSaved === false) {\n      saveStationsArray.push(station);\n      storage.setItem(line + \"_SaveStn\", JSON.stringify(saveStationsArray));\n      setStnSaved(true);\n    } else {\n      let findStn = saveStationsArray?.indexOf(station);\n      saveStationsArray.splice(findStn, 1);\n      storage.setItem(line + \"_SaveStn\", JSON.stringify(saveStationsArray));\n      setStnSaved(false);\n    }\n  };\n\n  useEffect(() => {\n    const inteval = setInterval(() => {\n      //setIsLoading(true);\n      let mtrAPI = `https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${line}&sta=${station}`;\n      axios\n        .get(mtrAPI)\n        .then((res) => {\n          setMtrEta(res.data.data[line + \"-\" + station]);\n          setMtrIsDelay(res.data.isdelay);\n          setMtrStatus(res.data.status);\n          //setIsLoading(false);\n        })\n        .catch((error) => console.log(error));\n    }, 10000);\n    return () => clearInterval(inteval);\n  }, [line, station]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setMtrEta([]);\n    let mtrAPI = `https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${line}&sta=${station}`;\n    axios\n      .get(mtrAPI)\n      .then((res) => {\n        setMtrIsDelay(res.data.isdelay);\n        setMtrStatus(res.data.status);\n        setMtrEta(res.data.data[line + \"-\" + station]);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n    var checkSave = saveStationsArray?.indexOf(station);\n    if (checkSave === -1 || saveStationsArray === null) {\n      setStnSaved(false);\n    } else {\n      setStnSaved(true);\n    }\n  }, [line, station]);\n\n  if (mtrStatus === \"0\") {\n    return (\n      <div className=\"mtrInfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={stnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={stnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(station)}\n              >\n                {stnSaved === true\n                  ? Dict.Common[lang].saveT\n                  : Dict.Common[lang].saveF}\n              </Button>\n            </div>\n          )}\n          <CardContent>\n            <p align=\"center\">未能讀取到站時間，請稍後再嘗試。</p>\n            <p align=\"center\">Cannnot Retrieve ETA information</p>\n            <p align=\"center\">Please try again later.</p>\n            <p align=\"center\">\n              <font size=\"1\">\n                <i>API Capture Failed</i>\n              </font>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else if (mtrIsDelay === \"Y\") {\n    return (\n      <div className=\"mtrInfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={stnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={stnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(station)}\n              >\n                {stnSaved === true\n                  ? Dict.Common[lang].saveT\n                  : Dict.Common[lang].saveF}\n              </Button>\n            </div>\n          )}\n          <CardContent>\n            {line === \"TML\" ? (\n              <Alert severity=\"warning\">{Dict.Common[lang].tmlInfo}</Alert>\n            ) : (\n              \"\"\n            )}\n            <p align=\"center\">未能讀取到站時間，請稍後再嘗試。</p>\n            <p align=\"center\">Cannnot Retrieve ETA information</p>\n            <p align=\"center\">Please try again later.</p>\n            <p align=\"center\">\n              <font size=\"1\">\n                <i>API Capture Success, no Data Returned.</i>\n              </font>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"mtrInfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={stnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={stnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(station)}\n              >\n                {stnSaved === true\n                  ? Dict.Common[lang].saveT\n                  : Dict.Common[lang].saveF}\n              </Button>\n            </div>\n          )}\n          {mtrEta?.UP != null && mtrEta?.UP.length > 0 ? (\n            <CardContent>\n              <div className={\"mtrstation__header\" + line}>\n                <div className=\"station__name\">\n                  {Dict.MtrStations[station][lang + \"_name\"]}{\" \"}\n                </div>\n                <div className=\"header__line\">\n                  {\" \"}\n                  {\" (\" +\n                    Dict.MtrLines[line][lang + \"_name\"] +\n                    \" - \" +\n                    Dict.Common[lang].UP +\n                    \")\"}\n                </div>\n              </div>\n\n              {mtrEta.UP?.map((train) => (\n                <div className=\"etaBox\">\n                  <div className=\"mtr__dest\">\n                    {train.dest === \"AWE\" && station !== \"AIR\"\n                      ? Dict.MtrStations.AIR[lang + \"_name\"] +\n                        \" / \" +\n                        Dict.MtrStations[train.dest][lang + \"_name\"]\n                      : Dict.MtrStations[train.dest][lang + \"_name\"]}\n                  </div>\n                  <div style={{ flex: \"1 0 0\" }} />\n                  <div className={\"mtr__plat\" + line}>{train.plat}</div>\n                  <div className=\"mtr__time\">\n                    {train.ttnt < 1\n                      ? Dict.Common[lang].dep\n                      : train.ttnt + \" \" + Dict.Common[lang].min}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          ) : (\n            \"\"\n          )}\n\n          {mtrEta.DOWN != null && mtrEta.DOWN.length > 0 ? (\n            <CardContent>\n              <div className={\"mtrstation__header\" + line}>\n                <div className=\"station__name\">\n                  {Dict.MtrStations[station][lang + \"_name\"]}\n                </div>\n                <div className=\"header__line\">\n                  {\" \"}\n                  {\" (\" +\n                    Dict.MtrLines[line][lang + \"_name\"] +\n                    \" - \" +\n                    Dict.Common[lang].DOWN +\n                    \")\"}\n                </div>\n              </div>\n\n              {mtrEta.DOWN?.map((train) => (\n                <div className=\"etaBox\">\n                  <div className=\"mtr__dest\">\n                    {Dict.MtrStations[train.dest][lang + \"_name\"]}\n                  </div>\n                  <div style={{ flex: \"1 0 0\" }} />\n                  <div className={\"mtr__plat\" + line}>{train.plat}</div>\n                  <div className=\"mtr__time\">\n                    {train.ttnt < 1\n                      ? Dict.Common[lang].dep\n                      : train.ttnt + \" \" + Dict.Common[lang].min}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          ) : (\n            \"\"\n          )}\n\n          {mtrEta?.sys_time ? (\n            <div className=\"etaBox__mtrfooter\">\n              {Dict.Common[lang].lastUpdate + \": \" + mtrEta?.sys_time}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default MTRInfo;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js",["77"],"const Common = {\n  en: {\n    UP: \"Outbound\",\n    DOWN: \"Inbound\",\n    arr: \"Arriving\",\n    dep: \"Departing\",\n    min: \"min\",\n    etaAlert:\n      \"ETA information will be refresh every 10 seconds, reference data only.\",\n    autoBtnOn: \"Auto swap\",\n    autoBtnOff: \"Auto swap\",\n    line: \"Line\",\n    stn: \"Station\",\n    lastUpdate: \"Last Update\",\n    eta: \"ETA\",\n    to: \"To \",\n    plat: \"Platform\",\n    defaultLine: \"Urban Lines\",\n    saveF: \"Save\",\n    saveT: \"Saved\",\n    tmlInfo: \"Tuen Ma Line will open on 27 June 2021.\",\n  },\n  tc: {\n    UP: \"上行\",\n    DOWN: \"下行\",\n    arr: \"即將到達\",\n    dep: \"正在離開\",\n    min: \"分鐘\",\n    etaAlert: \"到站時間資訊每10秒自動更新，資料只供參考。\",\n    autoBtnOn: \"自動轉\",\n    autoBtnOff: \"自動轉\",\n    line: \"路線\",\n    stn: \"站\",\n    lastUpdate: \"最後更新\",\n    eta: \"到站時間\",\n    to: \"往\",\n    plat: \"月台\",\n    defaultLine: \"市區線\",\n    saveF: \"儲存\",\n    saveT: \"已儲存\",\n    tmlInfo: \"屯馬線將於2021年6月27日通車\",\n  },\n};\n\nconst MtrLines = {\n  AEL: {\n    tc_name: \"機場快線\",\n    en_name: \"Airport Express\",\n    stations: [\"HOK\", \"KOW\", \"TSY\", \"AIR\", \"AWE\"],\n  },\n  TCL: {\n    tc_name: \"東涌線\",\n    en_name: \"Tung Chung Line\",\n    stations: [\"HOK\", \"KOW\", \"OLY\", \"NAC\", \"LAK\", \"TSY\", \"SUN\", \"TUC\"],\n  },\n  WRL: {\n    tc_name: \"西鐵線\",\n    en_name: \"West Rail Line\",\n    stations: [\n      \"HUH\",\n      \"ETS\",\n      \"AUS\",\n      \"NAC\",\n      \"MEF\",\n      \"TWW\",\n      \"KSR\",\n      \"YUL\",\n      \"LOP\",\n      \"TIS\",\n      \"SIH\",\n      \"TUM\",\n    ],\n  },\n  TKL: {\n    tc_name: \"將軍澳線\",\n    en_name: \"Tseung Kwan O Line\",\n    stations: [\"NOP\", \"QUB\", \"YAT\", \"TIK\", \"TKO\", \"LHP\", \"HAH\", \"POA\"],\n  },\n  TML: {\n    tc_name: \"屯馬線\",\n    en_name: \"Tuen Ma Line\",\n    stations: [\n      \"WKS\",\n      \"MOS\",\n      \"HEO\",\n      \"TSH\",\n      \"SHM\",\n      \"CIO\",\n      \"STW\",\n      \"CKT\",\n      \"TAW\",\n      \"HIK\",\n      \"DIH\",\n      \"KAT\",\n      \"SUW\",\n      \"TKW\",\n      \"HOM\",\n      \"HUH\",\n      \"ETS\",\n      \"AUS\",\n      \"NAC\",\n      \"MEF\",\n      \"TWW\",\n      \"KSR\",\n      \"YUL\",\n      \"LOP\",\n      \"TIS\",\n      \"SIH\",\n      \"TUM\",\n    ],\n  },\n};\n\nconst MtrStations = {\n  HOK: {\n    tc_name: \"香港\",\n    en_name: \"Hong Kong\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  KOW: {\n    tc_name: \"九龍\",\n    en_name: \"Kowloon\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TSY: {\n    tc_name: \"青衣\",\n    en_name: \"Tsing Yi\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  AIR: {\n    tc_name: \"機場\",\n    en_name: \"Airport\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  AWE: {\n    tc_name: \"博覽館\",\n    en_name: \"AsiaWorld Expo\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  OLY: {\n    tc_name: \"奧運\",\n    en_name: \"Olympic\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  NAC: {\n    tc_name: \"南昌\",\n    en_name: \"Nam Cheong\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  LAK: {\n    tc_name: \"荔景\",\n    en_name: \"Lai King\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  SUN: {\n    tc_name: \"欣澳\",\n    en_name: \"Sunny Bay\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TUC: {\n    tc_name: \"東涌\",\n    en_name: \"Tung Chung\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  WKS: {\n    tc_name: \"烏溪沙\",\n    en_name: \"Wu Kai Sha\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  MOS: {\n    tc_name: \"馬鞍山\",\n    en_name: \"Ma On Shan\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  HEO: {\n    tc_name: \"恆安\",\n    en_name: \"Heng On\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TSH: {\n    tc_name: \"大水坑\",\n    en_name: \"Tai Shui Hang\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  SHM: {\n    tc_name: \"石門\",\n    en_name: \"Shek Mun\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  CIO: {\n    tc_name: \"第一城\",\n    en_name: \"City One\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  STW: {\n    tc_name: \"沙田圍\",\n    en_name: \"Sha Tin Wai\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  CKT: {\n    tc_name: \"車公廟\",\n    en_name: \"Che Kung Temple\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TAW: {\n    tc_name: \"大圍\",\n    en_name: \"Tai Wai\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  HIK: {\n    tc_name: \"顯徑\",\n    en_name: \"Hin Keng\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  DIH: {\n    tc_name: \"鑽石山\",\n    en_name: \"Diamond Hill\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  KAT: {\n    tc_name: \"啟德\",\n    en_name: \"Kai Tak\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  SUW: {\n    tc_name: \"宋皇臺\",\n    en_name: \"Sung Wong Toi\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TKW: {\n    tc_name: \"土瓜灣\",\n    en_name: \"To Kwa Wan\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  HOM: {\n    tc_name: \"何文田\",\n    en_name: \"Ho Man Tin\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  HUH: {\n    tc_name: \"紅磡\",\n    en_name: \"Hung Hom\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  ETS: {\n    tc_name: \"尖東\",\n    en_name: \"East Tsim Sha Tsui\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  AUS: {\n    tc_name: \"柯士甸\",\n    en_name: \"Austin\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  MEF: {\n    tc_name: \"美孚\",\n    en_name: \"Mei Foo\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TWW: {\n    tc_name: \"荃灣西\",\n    en_name: \"Tsuen Wan West\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  KSR: {\n    tc_name: \"錦上路\",\n    en_name: \"Kam Sheung Road\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  YUL: {\n    tc_name: \"元朗\",\n    en_name: \"Yuen Long\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  LOP: {\n    tc_name: \"朗屏\",\n    en_name: \"Long Ping\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TIS: {\n    tc_name: \"天水圍\",\n    en_name: \"Tin Shui Wai\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  SIH: {\n    tc_name: \"兆康\",\n    en_name: \"Siu Hong\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TUM: {\n    tc_name: \"屯門\",\n    en_name: \"North Point\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  NOP: {\n    tc_name: \"北角\",\n    en_name: \"Tuen Mun\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  QUB: {\n    tc_name: \"鰂魚涌\",\n    en_name: \"Quarry Bay\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  YAT: {\n    tc_name: \"油塘\",\n    en_name: \"Yau Tong\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TIK: {\n    tc_name: \"調景嶺\",\n    en_name: \"Tiu Keng Leng\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  TKO: {\n    tc_name: \"將軍澳\",\n    en_name: \"Tseung Kwan O\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  LHP: {\n    tc_name: \"康城\",\n    en_name: \"LOHAS Park\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  HAH: {\n    tc_name: \"坑口\",\n    en_name: \"Hang Hau\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n  POA: {\n    tc_name: \"寶琳\",\n    en_name: \"Po Lam\",\n    lag: \"\",\n    lon: \"\",\n    active: \"1\",\n  },\n};\n\nexport default { Common, MtrLines, MtrStations };\n","/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js",["78"],"import React, { useState } from \"react\";\nimport SaveMTR from \"./component/MTRSaveInfo\";\nimport { Button } from \"@material-ui/core\";\n\nfunction SaveStations() {\n  const [lang, setLang] = useState(\"tc\");\n  const [swapLang, setSwapLang] = useState(false);\n\n  const storage = window.localStorage;\n  const wrlSaveStnArray = JSON.parse(storage.getItem(\"WRL_SaveStn\"));\n  const tklSaveStnArray = JSON.parse(storage.getItem(\"TKL_SaveStn\"));\n  const tclSaveStnArray = JSON.parse(storage.getItem(\"TCL_SaveStn\"));\n  const aelSaveStnArray = JSON.parse(storage.getItem(\"AEL_SaveStn\"));\n\n  if (swapLang === true) {\n    setTimeout(() => {\n      if (lang === \"en\") {\n        setLang(\"tc\");\n      } else {\n        setLang(\"en\");\n      }\n    }, 8000);\n  }\n\n  return (\n    <div className=\"saveStations\">\n      <div className=\"controlBtns\">\n        <div style={{ flex: \"1 0 0\" }} />\n        <Button\n          onClick={() => setLang(\"en\")}\n          disabled={lang === \"en\" || swapLang === true}\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"langButton\"\n          size=\"small\"\n        >\n          English\n        </Button>\n        <Button\n          onClick={() => setLang(\"tc\")}\n          disabled={lang === \"tc\" || swapLang === true}\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"langButton\"\n          size=\"small\"\n        >\n          中文\n        </Button>\n      </div>\n      {wrlSaveStnArray.length > 0\n        ? wrlSaveStnArray?.map((stn) => (\n            <SaveMTR line=\"WRL\" station={stn} lang={lang} />\n          ))\n        : \"\"}\n\n      {tklSaveStnArray.length > 0\n        ? tklSaveStnArray?.map((stn) => (\n            <SaveMTR line=\"TKL\" station={stn} lang={lang} />\n          ))\n        : \"\"}\n\n      {tclSaveStnArray.length > 0\n        ? tclSaveStnArray?.map((stn) => (\n            <SaveMTR line=\"TCL\" station={stn} lang={lang} />\n          ))\n        : \"\"}\n\n      {aelSaveStnArray.length > 0\n        ? aelSaveStnArray?.map((stn) => (\n            <SaveMTR line=\"AEL\" station={stn} lang={lang} />\n          ))\n        : \"\"}\n    </div>\n  );\n}\n\nexport default SaveStations;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js",["79"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardContent, Divider } from \"@material-ui/core\";\nimport DictM from \"./MTR_Dict.js\";\nimport \"../css/MTRInfo.css\";\nimport \"../css/SaveStnInfo.css\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction MTRSaveInfo({ line, station, lang }) {\n  const [mtrEta, setMtrEta] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [mtrIsDelay, setMtrIsDelay] = useState(\"\");\n  const [mtrStatus, setMtrStatus] = useState(\"\");\n\n  const storage = window.localStorage;\n  const saveStnArray = JSON.parse(storage.getItem(line + \"_SaveStn\"));\n  if (storage.getItem(line + \"_SaveStn\") === null) {\n    var newArray = [];\n    storage.setItem(line + \"_SaveStn\", JSON.stringify(newArray));\n  }\n\n  useEffect(() => {\n    const inteval = setInterval(() => {\n      let mtrAPI = `https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${line}&sta=${station}`;\n      axios\n        .get(mtrAPI)\n        .then((res) => {\n          setMtrEta(res.data.data[line + \"-\" + station]);\n          setMtrIsDelay(res.data.isdelay);\n          setMtrStatus(res.data.status);\n        })\n        .catch((error) => console.log(error));\n    }, 10000);\n    return () => clearInterval(inteval);\n  }, [line, station]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setMtrEta([]);\n    let mtrAPI = `https://rt.data.gov.hk/v1/transport/mtr/getSchedule.php?line=${line}&sta=${station}`;\n    axios\n      .get(mtrAPI)\n      .then((res) => {\n        setMtrIsDelay(res.data.isdelay);\n        setMtrStatus(res.data.status);\n        setMtrEta(res.data.data[line + \"-\" + station]);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n  }, [line, station]);\n\n  if (mtrStatus === \"0\") {\n    return (\n      <div className=\"mtrSaveInfo\">\n        <Card className=\"infoBox\">\n          {isLoading === true ? <LinearProgress color=\"secondary\" /> : \"\"}\n          <CardContent>\n            <div className={\"mtrstation__header\" + line}>\n              <div className=\"station__name\">\n                {DictM.MtrStations[station][lang + \"_name\"]}{\" \"}\n              </div>\n              <div className=\"header__line\">\n                {\"(\" + DictM.MtrLines[line][lang + \"_name\"] + \")\"}\n              </div>\n            </div>\n            <p align=\"center\">未有到站時間</p>\n            <p align=\"center\">No ETA Information</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else if (mtrIsDelay === \"Y\") {\n    return (\n      <div className=\"mtrSaveInfo\">\n        <Card className=\"infoBox\">\n          {isLoading === true ? <LinearProgress color=\"secondary\" /> : \"\"}\n          <CardContent>\n            <div className={\"mtrstation__header\" + line}>\n              <div className=\"station__name\">\n                {DictM.MtrStations[station][lang + \"_name\"]}{\" \"}\n              </div>\n              <div className=\"header__line\">\n                {\"(\" + DictM.MtrLines[line][lang + \"_name\"] + \")\"}\n              </div>\n            </div>\n            <p align=\"center\">未有到站時間</p>\n            <p align=\"center\">No ETA Information</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"mtrSaveInfo\">\n        <Card className=\"infoBox\">\n          {isLoading === true ? <LinearProgress color=\"secondary\" /> : \"\"}\n          <CardContent>\n            <div className={\"mtrstation__header\" + line}>\n              <div className=\"station__name\">\n                {DictM.MtrStations[station][lang + \"_name\"]}{\" \"}\n              </div>\n              <div className=\"header__line\">\n                {\"(\" + DictM.MtrLines[line][lang + \"_name\"] + \")\"}\n              </div>\n            </div>\n            <div className=\"saveStnETA\">\n              {mtrEta.UP?.map((train) => (\n                <div className=\"saveStnBox\">\n                  <div className=\"saveStnBoxRow\">\n                    <div className=\"saveStnBox_To\">\n                      {DictM.Common[lang].to +\n                        DictM.MtrStations[train.dest][lang + \"_name\"]}\n                    </div>\n                    <div className={\"mtr__plat\" + line}>{train.plat}</div>\n                  </div>\n                  <div className=\"saveStnBoxRow\">\n                    <div className=\"saveStnBoxTime\">\n                      {train.ttnt < 1\n                        ? DictM.Common[lang].dep\n                        : train.ttnt + DictM.Common[lang].min}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            {mtrEta.UP?.length > 0 ? <Divider /> : \"\"}\n            <div className=\"saveStnETA\">\n              {mtrEta.DOWN?.map((train) => (\n                <div className=\"saveStnBox\">\n                  <div className=\"saveStnBoxRow\">\n                    <div className=\"saveStnBox_To\">\n                      {DictM.Common[lang].to +\n                        DictM.MtrStations[train.dest][lang + \"_name\"]}\n                    </div>\n                    <div className={\"mtr__plat\" + line}>{train.plat}</div>\n                  </div>\n                  <div className=\"saveStnBoxRow\">\n                    <div className=\"saveStnBoxTime\">\n                      {train.ttnt < 1\n                        ? DictM.Common[lang].dep\n                        : train.ttnt + DictM.Common[lang].min}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            {mtrEta.DOWN?.length > 0 ? <Divider /> : \"\"}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default MTRSaveInfo;\n",{"ruleId":"80","severity":1,"message":"81","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":31},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"80","severity":1,"message":"88","line":12,"column":3,"nodeType":"82","messageId":"83","endLine":12,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":183,"column":13,"nodeType":"91","messageId":"92","endLine":187,"endColumn":14,"fix":"93"},{"ruleId":"80","severity":1,"message":"94","line":8,"column":17,"nodeType":"82","messageId":"83","endLine":8,"endColumn":26},{"ruleId":"95","severity":1,"message":"96","line":412,"column":1,"nodeType":"97","endLine":418,"endColumn":3},{"ruleId":"98","severity":1,"message":"99","line":64,"column":6,"nodeType":"100","endLine":64,"endColumn":11,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":74,"column":6,"nodeType":"100","endLine":74,"endColumn":21,"suggestions":"103"},{"ruleId":"95","severity":1,"message":"96","line":425,"column":1,"nodeType":"97","endLine":425,"endColumn":50},{"ruleId":"80","severity":1,"message":"104","line":7,"column":20,"nodeType":"82","messageId":"83","endLine":7,"endColumn":31},{"ruleId":"80","severity":1,"message":"105","line":16,"column":9,"nodeType":"82","messageId":"83","endLine":16,"endColumn":21},"no-unused-vars","'onServiceWorkerUpdate' is defined but never used.","Identifier","unusedVar","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"'ClickAwayListener' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"108","text":"109"},"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lrtStationArray'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'saveStationsArray'. Either include it or remove the dependency array.",["111"],"'setSwapLang' is assigned a value but never used.","'saveStnArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[4774,4774]," rel=\"noreferrer\"",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [lrtStationArray, sid]",{"range":"116","text":"117"},"Update the dependencies array to be: [line, saveStationsArray, station]",{"range":"118","text":"119"},[1906,1911],"[lrtStationArray, sid]",[2602,2617],"[line, saveStationsArray, station]"]