[{"/Users/leowong/Documents/JS/hk-transport-display/src/index.js":"1","/Users/leowong/Documents/JS/hk-transport-display/src/App.js":"2","/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js":"3","/Users/leowong/Documents/JS/hk-transport-display/src/Header.js":"4","/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js":"5","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js":"6","/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js":"7","/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js":"8","/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js":"9","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js":"10","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js":"11","/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js":"12","/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js":"13","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js":"14"},{"size":1078,"mtime":1624375293529,"results":"15","hashOfConfig":"16"},{"size":928,"mtime":1624375559671,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1624375293530,"results":"18","hashOfConfig":"16"},{"size":5143,"mtime":1624415258883,"results":"19","hashOfConfig":"16"},{"size":6197,"mtime":1624375293524,"results":"20","hashOfConfig":"16"},{"size":4583,"mtime":1624378417504,"results":"21","hashOfConfig":"16"},{"size":609,"mtime":1624375293526,"results":"22","hashOfConfig":"16"},{"size":6684,"mtime":1624379391703,"results":"23","hashOfConfig":"16"},{"size":6911,"mtime":1624375293525,"results":"24","hashOfConfig":"16"},{"size":9098,"mtime":1624387274455,"results":"25","hashOfConfig":"16"},{"size":7013,"mtime":1624380390841,"results":"26","hashOfConfig":"16"},{"size":5284,"mtime":1624375293530,"results":"27","hashOfConfig":"16"},{"size":5442,"mtime":1624415477020,"results":"28","hashOfConfig":"16"},{"size":7350,"mtime":1624413046327,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"e7sjwq",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/leowong/Documents/JS/hk-transport-display/src/index.js",["62"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport { onServiceWorkerUpdate } from \"@3m1/service-worker-updater\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: () => {\n    const reloadMsg = window.confirm(\n      \"偵測到新版本，更新中。New Version Detected, Updating.\"\n    );\n    reloadMsg && window.location.reload();\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["63","64"],"/Users/leowong/Documents/JS/hk-transport-display/src/App.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/Header.js",["65","66","67"],"/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js",["68"],"import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport Dict from \"./component/LRT_Dict.js\";\nimport LrtInfo from \"./component/LrtInfo.js\";\nimport \"./css/LRT.css\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LRTLogo from \"./img/LR_old.png\";\nimport GTranslateOutlinedIcon from \"@material-ui/icons/GTranslateOutlined\";\n\nfunction LRT() {\n  const [station, setStation] = useState(\"\");\n  const [lrtZone, setLrtZone] = useState(\"\");\n  const [lrtRoute, setLrtRoute] = useState(\"\");\n  const [swapLang, setSwapLang] = useState(false);\n  const [optionSelected, setOptionSelected] = useState(\"\");\n  const [lang, setLang] = useState(\"tc\");\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n\n  if (swapLang === true) {\n    setTimeout(() => {\n      if (lang === \"en\") {\n        setLang(\"tc\");\n      } else {\n        setLang(\"en\");\n      }\n    }, 8000);\n  }\n\n  const handleZone = (e) => {\n    setStation(\"\");\n    setLrtZone(e.target.value);\n    setLrtRoute(\"\");\n    setOptionSelected(\"zone\");\n  };\n\n  const handleRoute = (e) => {\n    setStation(\"\");\n    setLrtZone(\"\");\n    setLrtRoute(e.target.value);\n    setOptionSelected(\"route\");\n  };\n\n  const handleStation = (e) => {\n    setStation(e.target.value);\n  };\n\n  function DisplayStation(props) {\n    if (optionSelected === \"zone\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtZoneStation[lrtZone]?.map((sid) => (\n              <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else if (optionSelected === \"route\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtRoutes[lrtRoute]?.map((sid) => (\n              <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n            disabled\n          />\n        </FormControl>\n      );\n    }\n  }\n\n  return (\n    <div className=\"lrt\">\n      <div className=\"container\">\n        <div className=\"lrt__header\">\n          <div className=\"lrt__logo\">\n            <img src={LRTLogo} alt=\"Light Rail Logo\" />\n          </div>\n          <div className=\"lrt__title\">{Dict.lrtCommon[lang].title}</div>\n        </div>\n        <div className=\"lrt__topBar\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color={swapLang === true ? \"secondary\" : \"primary\"}\n            className=\"langButton\"\n            startIcon={<GTranslateOutlinedIcon />}\n            onClick={\n              swapLang === true\n                ? () => setSwapLang(false)\n                : () => setSwapLang(true)\n            }\n          >\n            <small>\n              {swapLang === true\n                ? Dict.lrtCommon[lang].autoBtnOff\n                : Dict.lrtCommon[lang].autoBtnOn}\n            </small>\n          </Button>\n          <div style={{ flex: \"1 0 0\" }} />\n          <Button\n            onClick={() => setLang(\"en\")}\n            disabled={lang === \"en\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            English\n          </Button>\n          <Button\n            onClick={() => setLang(\"tc\")}\n            disabled={lang === \"tc\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            中文\n          </Button>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <FormControl className=\"zoneSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].zone}</InputLabel>\n            <Select\n              value={lrtZone || \"\"}\n              onChange={handleZone}\n              label=\"Zone\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtZoneName[lang]).map(([id, name]) => (\n                <MenuItem value={id}>{name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className=\"routeSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].route}</InputLabel>\n            <Select\n              value={lrtRoute || \"\"}\n              onChange={handleRoute}\n              label=\"Route\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtRoutes).map(([id, name]) => (\n                <MenuItem value={id}>{id}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <DisplayStation />\n          <FormControl className=\"saveStnSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].saveStation}</InputLabel>\n            <Select\n              value={station || \"\"}\n              onChange={handleStation}\n              label=\"Station\"\n              fullWidth\n            >\n              {lrtStationArray?.map((sid) => (\n                <MenuItem value={sid}>{Dict?.lrtStation[lang][sid]}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"lrt__container\">\n          {station !== \"\" ? <LrtInfo sid={station} lang={lang} /> : \"\"}\n        </div>\n        <div className=\"lrt__info\">\n          <Alert severity=\"info\">{Dict.lrtCommon[lang].etaAlert}</Alert>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LRT;\n","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js",["69"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js",["70"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardContent, Chip, Button } from \"@material-ui/core\";\nimport Dict from \"./LRT_Dict.js\";\nimport \"../css/LRTInfo.css\";\nimport LRTTrain from \"../img/lrt_train.png\";\nimport Save from \"@material-ui/icons/StarBorder\";\nimport Saved from \"@material-ui/icons/Star\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction LrtInfo({ sid, lang }) {\n  const [lrtETA, setLRTEta] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [lrtStnSaved, setLrtStnSaved] = useState(false);\n  var { fLang } = \"\";\n\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n  if (storage.getItem(\"LrtSaveStn\") === null) {\n    var newArray = [];\n    storage.setItem(\"LrtSaveStn\", JSON.stringify(newArray));\n  }\n\n  //storage.clear();\n\n  if (lang === \"tc\") {\n    fLang = \"ch\";\n  } else {\n    fLang = lang;\n  }\n\n  useEffect(() => {\n    //setIsLoading(true);\n    const inteval = setInterval(() => {\n      let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n      axios\n        .get(lrtAPI)\n        .then((res) => {\n          setLRTEta(res.data);\n          // setIsLoading(false);\n        })\n        .catch((error) => console.log(error));\n    }, 10000);\n    return () => clearInterval(inteval);\n  }, [sid]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setLRTEta();\n    let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n    axios\n      .get(lrtAPI)\n      .then((res) => {\n        setLRTEta(res.data);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n    var checkSave = lrtStationArray?.indexOf(sid);\n    if (checkSave === -1 || lrtStationArray === null) {\n      setLrtStnSaved(false);\n    } else {\n      setLrtStnSaved(true);\n    }\n  }, [sid]);\n\n  const handleLocalStorage = (sid) => {\n    if (lrtStnSaved === false) {\n      lrtStationArray.push(sid);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(true);\n    } else {\n      let findSID = lrtStationArray?.indexOf(sid);\n      lrtStationArray.splice(findSID, 1);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(false);\n    }\n  };\n\n  if (lrtETA?.status === 0) {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          <CardContent>\n            <p>未能讀取到站時間，請稍後再嘗試。</p>\n            <p>Cannnot Retrieve ETA information, Please try again later.</p>\n            <p align=\"center\">\n              <font size=\"1\">\n                <i>API Capture Failed</i>\n              </font>\n            </p>\n          </CardContent>\n          <CardContent>\n            {lrtETA?.system_time ? (\n              <div className=\"etaBox__footer\">\n                {Dict.lrtCommon[lang].lastUpdate + \": \" + lrtETA?.system_time}\n              </div>\n            ) : (\n              \"\"\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          {lrtETA?.platform_list.map((plat) => (\n            <CardContent>\n              <div className=\"station__header\">\n                <div className=\"station__platform\">{plat.platform_id}</div>\n                <div className=\"station__name\"> {Dict.lrtStation.tc[sid]}</div>\n                <div className=\"station__name\">\n                  <small>{Dict.lrtStation.en[sid]}</small>\n                </div>\n              </div>\n              {plat.end_service_status === 1 ? (\n                <div className=\"etaBox\">\n                  <div className=\"lrt__route\"></div>\n                  <div className=\"etaBox__row\">\n                    <small>{Dict.lrtCommon[lang].end_service}</small>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n              {plat.route_list?.map((train) =>\n                train.stop !== 1 ? (\n                  <div className=\"etaBox\">\n                    <div className={\"lrt__route_\" + train.route_no}>\n                      <Chip\n                        size=\"small\"\n                        className=\"lrtChip\"\n                        style={{\n                          backgroundColor: \"white\",\n                          color: \"black\",\n                          width: \"50px\",\n                        }}\n                        label={train.route_no}\n                      />\n                    </div>\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"dest_\" + fLang]}</small>\n                    </div>\n                    <div style={{ flex: \"1 0 0\" }} />\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"time_\" + fLang]}</small>\n                    </div>\n                    <div className=\"lrtTrain__length\">\n                      {Array(train.train_length)\n                        .fill()\n                        .map((_, i) => (\n                          <img src={LRTTrain} alt=\"Light Rail Cab\" />\n                        ))}\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )}\n            </CardContent>\n          ))}\n          {lrtETA?.system_time ? (\n            <div className=\"etaBox__footer\">\n              {Dict.lrtCommon[lang].lastUpdate + \": \" + lrtETA?.system_time}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default LrtInfo;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js",["71","72","73"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js",["74"],"/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js",["75","76","77","78","79"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js",["80","81"],{"ruleId":"82","severity":1,"message":"83","line":7,"column":10,"nodeType":"84","messageId":"85","endLine":7,"endColumn":31},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"82","severity":1,"message":"90","line":12,"column":3,"nodeType":"84","messageId":"85","endLine":12,"endColumn":20},{"ruleId":"82","severity":1,"message":"91","line":26,"column":8,"nodeType":"84","messageId":"85","endLine":26,"endColumn":12},{"ruleId":"92","severity":1,"message":"93","line":183,"column":13,"nodeType":"94","messageId":"95","endLine":187,"endColumn":14,"fix":"96"},{"ruleId":"82","severity":1,"message":"97","line":8,"column":17,"nodeType":"84","messageId":"85","endLine":8,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":412,"column":1,"nodeType":"100","endLine":418,"endColumn":3},{"ruleId":"101","severity":1,"message":"102","line":64,"column":6,"nodeType":"103","endLine":64,"endColumn":11,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":74,"column":6,"nodeType":"103","endLine":74,"endColumn":21,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":174,"column":30,"nodeType":"109","messageId":"110","endLine":174,"endColumn":32},{"ruleId":"107","severity":1,"message":"108","line":174,"column":58,"nodeType":"109","messageId":"110","endLine":174,"endColumn":60},{"ruleId":"98","severity":1,"message":"99","line":425,"column":1,"nodeType":"100","endLine":425,"endColumn":50},{"ruleId":"82","severity":1,"message":"111","line":12,"column":20,"nodeType":"84","messageId":"85","endLine":12,"endColumn":31},{"ruleId":"112","severity":1,"message":"113","line":25,"column":9,"nodeType":"84","messageId":"114","endLine":25,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":28,"column":9,"nodeType":"84","messageId":"114","endLine":28,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":31,"column":9,"nodeType":"84","messageId":"114","endLine":31,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":34,"column":9,"nodeType":"84","messageId":"114","endLine":34,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":106,"column":32,"nodeType":"109","messageId":"110","endLine":106,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":106,"column":60,"nodeType":"109","messageId":"110","endLine":106,"endColumn":62},"no-unused-vars","'onServiceWorkerUpdate' is defined but never used.","Identifier","unusedVar","no-native-reassign",["115"],"no-negated-in-lhs",["116"],"'ClickAwayListener' is defined but never used.","'Chip' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"117","text":"118"},"'useEffect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lrtStationArray'. Either include it or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has a missing dependency: 'saveStationsArray'. Either include it or remove the dependency array.",["120"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setSwapLang' is assigned a value but never used.","no-redeclare","'newArray' is already defined.","redeclared","no-global-assign","no-unsafe-negation",[4801,4801]," rel=\"noreferrer\"",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [lrtStationArray, sid]",{"range":"125","text":"126"},"Update the dependencies array to be: [line, saveStationsArray, station]",{"range":"127","text":"128"},[1906,1911],"[lrtStationArray, sid]",[2602,2617],"[line, saveStationsArray, station]"]