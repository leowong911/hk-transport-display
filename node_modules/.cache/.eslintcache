[{"/Users/leowong/Documents/JS/hk-transport-display/src/index.js":"1","/Users/leowong/Documents/JS/hk-transport-display/src/App.js":"2","/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js":"3","/Users/leowong/Documents/JS/hk-transport-display/src/Header.js":"4","/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js":"5","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js":"6","/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js":"7","/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js":"8","/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js":"9","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js":"10","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js":"11","/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js":"12","/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js":"13","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js":"14","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRRouteMap.js":"15","/Users/leowong/Documents/JS/hk-transport-display/src/Settings.js":"16","/Users/leowong/Documents/JS/hk-transport-display/src/component/LRTSaveInfo.js":"17"},{"size":1009,"mtime":1624677458703,"results":"18","hashOfConfig":"19"},{"size":1283,"mtime":1624890436138,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1624375293530,"results":"21","hashOfConfig":"19"},{"size":5541,"mtime":1624637512684,"results":"22","hashOfConfig":"19"},{"size":5961,"mtime":1624780027427,"results":"23","hashOfConfig":"19"},{"size":5213,"mtime":1624726139064,"results":"24","hashOfConfig":"19"},{"size":609,"mtime":1624375293526,"results":"25","hashOfConfig":"19"},{"size":12960,"mtime":1624976831278,"results":"26","hashOfConfig":"19"},{"size":7299,"mtime":1624862255020,"results":"27","hashOfConfig":"19"},{"size":9222,"mtime":1624936064418,"results":"28","hashOfConfig":"19"},{"size":7906,"mtime":1624935635229,"results":"29","hashOfConfig":"19"},{"size":5284,"mtime":1624375293530,"results":"30","hashOfConfig":"19"},{"size":7689,"mtime":1624891919898,"results":"31","hashOfConfig":"19"},{"size":8482,"mtime":1624726345712,"results":"32","hashOfConfig":"19"},{"size":2401,"mtime":1624936163736,"results":"33","hashOfConfig":"19"},{"size":3611,"mtime":1624633821209,"results":"34","hashOfConfig":"19"},{"size":5805,"mtime":1624977342153,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e7sjwq",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/leowong/Documents/JS/hk-transport-display/src/index.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/App.js",["75"],"/Users/leowong/Documents/JS/hk-transport-display/src/reportWebVitals.js",[],["76","77"],"/Users/leowong/Documents/JS/hk-transport-display/src/Header.js",["78"],"import {\n  AppBar,\n  Button,\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  makeStyles,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\nimport TrainIcon from \"@material-ui/icons/Train\";\nimport \"./css/Header.css\";\nimport { Link } from \"react-router-dom\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport TramIcon from \"@material-ui/icons/Tram\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport appInfo from \"../package.json\";\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nfunction Header() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleUpdateApp = () => {\n    window.location.reload();\n  };\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"header\">\n      <AppBar position=\"static\" className=\"header__appBar\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className=\"header__iconBtn\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className=\"header__title\">\n            <Link to=\"/\">香港鐵路資訊 HK Railway Info</Link>\n          </Typography>\n\n          {/* <Chip\n            size=\"small\"\n            color=\"secondary\"\n            label=\"Beta!\"\n            className=\"header__chip\"\n          />*/}\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"temporary\"\n        anchor=\"left\"\n        open={open}\n        onClose={handleDrawerClose}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/\" onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              主頁 Home\n            </Link>\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to=\"/lrt\" onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <TramIcon />\n              </ListItemIcon>\n              輕鐵 Light Rail\n            </Link>\n          </ListItem>\n          <ListItem>\n            <Link to={\"/mtr/l/s\"} onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <TrainIcon />\n              </ListItemIcon>\n              市區線 Urban Lines\n            </Link>\n          </ListItem>\n        </List>\n        {/*\n        <Divider />\n        <List>\n          <ListItem>\n            <Link to={\"/settings\"} onClick={handleDrawerClose}>\n              <ListItemIcon>\n                <SettingsIcon />\n              </ListItemIcon>\n              設定 Settings\n            </Link>\n          </ListItem>\n        </List>\n        */}\n        <Divider />\n        <List>\n          <ListItem>Version: {appInfo.version}</ListItem>\n          <ListItem>\n            <a\n              href=\"http://dubdub.pro/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={handleDrawerClose}\n            >\n              DubDub Production\n            </a>\n          </ListItem>\n          <ListItem>\n            <Button onClick={() => handleUpdateApp()}>\n              <CachedIcon />\n            </Button>\n          </ListItem>\n        </List>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default Header;\n","/Users/leowong/Documents/JS/hk-transport-display/src/LRT.js",["79"],"import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Dict from \"./component/LRT_Dict.js\";\nimport LrtInfo from \"./component/LrtInfo.js\";\nimport \"./css/LRT.css\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport LRTLogo from \"./img/LR_old.png\";\nimport GTranslateOutlinedIcon from \"@material-ui/icons/GTranslateOutlined\";\n\nfunction LRT() {\n  const [station, setStation] = useState(\"\");\n  const [lrtZone, setLrtZone] = useState(\"\");\n  const [lrtRoute, setLrtRoute] = useState(\"\");\n  const [swapLang, setSwapLang] = useState(false);\n  const [optionSelected, setOptionSelected] = useState(\"\");\n  const [lang, setLang] = useState(\"tc\");\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n\n  if (swapLang === true) {\n    setTimeout(() => {\n      if (lang === \"en\") {\n        setLang(\"tc\");\n      } else {\n        setLang(\"en\");\n      }\n    }, 8000);\n  }\n\n  const handleZone = (e) => {\n    setStation(\"\");\n    setLrtZone(e.target.value);\n    setLrtRoute(\"\");\n    setOptionSelected(\"zone\");\n  };\n\n  const handleRoute = (e) => {\n    setStation(\"\");\n    setLrtZone(\"\");\n    setLrtRoute(e.target.value);\n    setOptionSelected(\"route\");\n  };\n\n  const handleStation = (e) => {\n    setStation(e.target.value);\n  };\n\n  function DisplayStation(props) {\n    if (optionSelected === \"zone\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtZoneStation[lrtZone]?.map((sid) => (\n              <MenuItem value={sid}>\n                {Dict?.lrtStations[sid][lang + \"_name\"]}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else if (optionSelected === \"route\") {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Dict.lrtRoutes[lrtRoute].stations?.map((sid) => (\n              <MenuItem value={sid}>\n                {Dict?.lrtStations[sid][lang + \"_name\"]}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    } else {\n      return (\n        <FormControl className=\"stationSelect\">\n          <InputLabel>{Dict.lrtCommon[lang].stn}</InputLabel>\n          <Select\n            value={station || \"\"}\n            onChange={handleStation}\n            label=\"Station\"\n            fullWidth\n          >\n            {Object.entries(Dict.lrtStations).map(([id, name]) => (\n              <MenuItem value={id}>{name[lang + \"_name\"]}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      );\n    }\n  }\n\n  return (\n    <div className=\"lrt\">\n      <div className=\"container\">\n        <div className=\"lrt__header\">\n          <div className=\"lrt__logo\">\n            <img src={LRTLogo} alt=\"Light Rail Logo\" />\n          </div>\n          <div className=\"lrt__title\">{Dict.lrtCommon[lang].title}</div>\n        </div>\n        <div className=\"lrt__topBar\">\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color={swapLang === true ? \"secondary\" : \"primary\"}\n            className=\"langButton\"\n            startIcon={<GTranslateOutlinedIcon />}\n            onClick={\n              swapLang === true\n                ? () => setSwapLang(false)\n                : () => setSwapLang(true)\n            }\n          >\n            <small>\n              {swapLang === true\n                ? Dict.lrtCommon[lang].autoBtnOff\n                : Dict.lrtCommon[lang].autoBtnOn}\n            </small>\n          </Button>\n          <div style={{ flex: \"1 0 0\" }} />\n          <Button\n            onClick={() => setLang(\"en\")}\n            disabled={lang === \"en\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            English\n          </Button>\n          <Button\n            onClick={() => setLang(\"tc\")}\n            disabled={lang === \"tc\" || swapLang === true}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"langButton\"\n            size=\"small\"\n          >\n            中文\n          </Button>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <FormControl className=\"zoneSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].zone}</InputLabel>\n            <Select\n              value={lrtZone || \"\"}\n              onChange={handleZone}\n              label=\"Zone\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtZoneNames).map(([id, name]) => (\n                <MenuItem value={id}>{name[lang + \"_name\"]}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className=\"routeSelect\">\n            <InputLabel>{Dict.lrtCommon[lang].route}</InputLabel>\n            <Select\n              value={lrtRoute || \"\"}\n              onChange={handleRoute}\n              label=\"Route\"\n              fullWidth\n            >\n              {Object.entries(Dict.lrtRoutes).map(([id]) => (\n                <MenuItem value={id}>{id}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"lrt__topBar2\">\n          <DisplayStation />\n        </div>\n        <div className=\"lrt__container\">\n          {station !== \"\" ? <LrtInfo sid={station} lang={lang} /> : \"\"}\n        </div>\n        <div className=\"lrt__info\">\n          <Alert severity=\"info\">{Dict.lrtCommon[lang].etaAlert}</Alert>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LRT;\n","/Users/leowong/Documents/JS/hk-transport-display/src/MTR.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/firebase.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/LRT_Dict.js",["80"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/LrtInfo.js",["81"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardContent, Chip, Button } from \"@material-ui/core\";\nimport Dict from \"./LRT_Dict.js\";\nimport \"../css/LRTInfo.css\";\nimport LRTTrain from \"../img/lrt_train.png\";\nimport Save from \"@material-ui/icons/StarBorder\";\nimport Saved from \"@material-ui/icons/Star\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction LrtInfo({ sid, lang }) {\n  const [lrtETA, setLRTEta] = useState();\n  const [isLoading, setIsLoading] = useState(false);\n  const [lrtStnSaved, setLrtStnSaved] = useState(false);\n  var { fLang } = \"\";\n\n  const storage = window.localStorage;\n  const lrtStationArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n  if (storage.getItem(\"LrtSaveStn\") === null) {\n    var newArray = [];\n    storage.setItem(\"LrtSaveStn\", JSON.stringify(newArray));\n  }\n\n  if (lang === \"tc\") {\n    fLang = \"ch\";\n  } else {\n    fLang = lang;\n  }\n\n  useEffect(() => {\n    const inteval = setInterval(() => {\n      let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n      axios\n        .get(lrtAPI)\n        .then((res) => {\n          setLRTEta(res.data);\n          setIsLoading(false);\n        })\n        .catch((error) => console.log(error));\n    }, 10000);\n    return () => clearInterval(inteval);\n  }, [sid]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setLRTEta();\n    let lrtAPI = `https://rt.data.gov.hk/v1/transport/mtr/lrt/getSchedule?station_id=${sid}`;\n    axios\n      .get(lrtAPI)\n      .then((res) => {\n        setLRTEta(res.data);\n        setIsLoading(false);\n      })\n      .catch((error) => console.log(error));\n    var checkSave = lrtStationArray?.indexOf(sid);\n    if (checkSave === -1 || lrtStationArray === null) {\n      setLrtStnSaved(false);\n    } else {\n      setLrtStnSaved(true);\n    }\n  }, [sid]);\n\n  const handleLocalStorage = (sid) => {\n    if (lrtStnSaved === false) {\n      lrtStationArray.push(sid);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(true);\n    } else {\n      let findSID = lrtStationArray?.indexOf(sid);\n      lrtStationArray.splice(findSID, 1);\n      storage.setItem(\"LrtSaveStn\", JSON.stringify(lrtStationArray));\n      setLrtStnSaved(false);\n    }\n  };\n\n  if (lrtETA?.status === 0) {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          <CardContent>\n            <p>未能讀取到站時間，請稍後再嘗試。</p>\n            <p>Cannnot Retrieve ETA information, Please try again later.</p>\n            <p align=\"center\">\n              <font size=\"1\">\n                <i>API Capture Failed</i>\n              </font>\n            </p>\n          </CardContent>\n          <CardContent>\n            {lrtETA?.system_time ? (\n              <div className=\"etaBox__footer\">\n                {Dict.lrtCommon[lang].lastUpdate + \": \" + lrtETA?.system_time}\n              </div>\n            ) : (\n              \"\"\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"lrtinfo\">\n        <Card className=\"infobox\">\n          {isLoading === true ? (\n            <LinearProgress color=\"secondary\" />\n          ) : (\n            <div className=\"favouriteBox\">\n              <Button\n                variant=\"contained\"\n                color={lrtStnSaved === true ? \"\" : \"primary\"}\n                size=\"small\"\n                endIcon={lrtStnSaved === true ? <Saved /> : <Save />}\n                onClick={() => handleLocalStorage(sid)}\n              >\n                {lrtStnSaved === true\n                  ? Dict.lrtCommon[lang].saveTrue\n                  : Dict.lrtCommon[lang].saveFalse}\n              </Button>\n            </div>\n          )}\n\n          {lrtETA?.platform_list.map((plat) => (\n            <CardContent>\n              <div className=\"station__header\">\n                <div className=\"station__platform\">{plat.platform_id}</div>\n                <div className=\"station__name\">\n                  {\" \"}\n                  {Dict.lrtStations[sid].tc_name}\n                </div>\n                <div className=\"station__name\">\n                  <small>{Dict.lrtStations[sid].en_name}</small>\n                </div>\n              </div>\n              {plat.end_service_status === 1 ? (\n                <div className=\"etaBox\">\n                  <div className=\"lrt__route\"></div>\n                  <div className=\"etaBox__row\">\n                    <small>{Dict.lrtCommon[lang].end_service}</small>\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n              {plat.route_list?.map((train) =>\n                train.stop !== 1 ? (\n                  <div className=\"etaBox\">\n                    <div className={\"lrt__route_\" + train.route_no}>\n                      <Chip\n                        size=\"small\"\n                        className=\"lrtChip\"\n                        style={{\n                          backgroundColor: \"white\",\n                          color: \"black\",\n                          width: \"50px\",\n                        }}\n                        label={train.route_no}\n                      />\n                    </div>\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"dest_\" + fLang]}</small>\n                    </div>\n                    <div style={{ flex: \"1 0 0\" }} />\n                    <div className=\"etaBox__row\">\n                      <small>{train[\"time_\" + fLang]}</small>\n                    </div>\n                    <div className=\"lrtTrain__length\">\n                      {Array(train.train_length)\n                        .fill()\n                        .map((_, i) => (\n                          <img src={LRTTrain} alt=\"Light Rail Cab\" />\n                        ))}\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )}\n            </CardContent>\n          ))}\n          {lrtETA?.system_time ? (\n            <div className=\"etaBox__footer\">\n              {Dict.lrtCommon[lang].lastUpdate +\n                \": \" +\n                new Date(\n                  Date.parse(lrtETA?.system_time.replace(/-/g, \"/\"))\n                ).toLocaleString(\"en-GB\", {\n                  year: \"numeric\",\n                  month: \"numeric\",\n                  day: \"numeric\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  second: \"2-digit\",\n                })}\n            </div>\n          ) : (\n            \"\"\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default LrtInfo;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRInfo.js",["82"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/MTR_Dict.js",["83"],"/Users/leowong/Documents/JS/hk-transport-display/src/serviceWorkerRegistration.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/SaveStations.js",["84","85"],"/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRSaveInfo.js",[],"/Users/leowong/Documents/JS/hk-transport-display/src/component/MTRRouteMap.js",["86"],"/Users/leowong/Documents/JS/hk-transport-display/src/Settings.js",["87","88","89"],"import React, { useEffect, useState } from \"react\";\nimport \"./css/Settings.css\";\n\nimport DictM from \"./component/MTR_Dict.js\";\nimport DictL from \"./component/LRT_Dict.js\";\n\nfunction Settings() {\n  const storage = window.localStorage;\n  const [haveLrtRecords, setHaveLrtRecords] = useState(false);\n\n  const wrlSaveStnArray = JSON.parse(storage.getItem(\"WRL_SaveStn\"));\n  const tklSaveStnArray = JSON.parse(storage.getItem(\"TKL_SaveStn\"));\n  const tclSaveStnArray = JSON.parse(storage.getItem(\"TCL_SaveStn\"));\n  const aelSaveStnArray = JSON.parse(storage.getItem(\"AEL_SaveStn\"));\n  const tmlSaveStnArray = JSON.parse(storage.getItem(\"TML_SaveStn\"));\n  const lrtSaveStnArray = JSON.parse(storage.getItem(\"LrtSaveStn\"));\n\n  useEffect(() => {\n    if (storage.getItem(\"LrtSaveStn\") === null) {\n      setHaveLrtRecords(true);\n    }\n  }, []);\n\n  return (\n    <div className=\"settings\">\n      <div className=\"settingPart\">\n        <div className=\"settingHeading\">Save Stations</div>\n\n        <div className=\"settingRow\">\n          <div className=\"saveStnLine\">{DictM.MtrLines.TKL.tc_name}</div>\n          <div className=\"saveStnCount\">\n            已儲存車站數目: {tklSaveStnArray?.length}\n          </div>\n          <div className=\"saveStnDetails\">\n            {tklSaveStnArray?.map((stn, i) => DictM.MtrStations[stn].tc_name)}\n          </div>\n          <div className=\"saveStnActions\">\n            {\" \"}\n            {tklSaveStnArray.length === 0 ? \"\" : \"Delete All\"}\n          </div>\n        </div>\n        <div className=\"settingRow\">\n          <div className=\"saveStnLine\">{DictM.MtrLines.TCL.tc_name}</div>\n          <div className=\"saveStnCount\">\n            已儲存車站數目: {tclSaveStnArray?.length}\n          </div>\n          <div className=\"saveStnDetails\">\n            {tclSaveStnArray?.map((stn, i) => DictM.MtrStations[stn].tc_name)}\n          </div>\n          <div className=\"saveStnActions\">\n            {\" \"}\n            {tclSaveStnArray.length === 0 ? \"\" : \"Delete All\"}\n          </div>\n        </div>\n        <div className=\"settingRow\">\n          <div className=\"saveStnLine\">{DictM.MtrLines.AEL.tc_name}</div>\n          <div className=\"saveStnCount\">\n            已儲存車站數目: {aelSaveStnArray?.length}\n          </div>\n          <div className=\"saveStnDetails\">\n            {aelSaveStnArray?.map((stn, i) => DictM.MtrStations[stn].tc_name)}\n          </div>\n          <div className=\"saveStnActions\">\n            {\" \"}\n            {aelSaveStnArray.length === 0 ? \"\" : \"Delete All\"}\n          </div>\n        </div>\n        <div className=\"settingRow\">\n          <div className=\"saveStnLine\">{DictM.MtrLines.TML.tc_name}</div>\n          <div className=\"saveStnCount\">\n            已儲存車站數目: {tmlSaveStnArray?.length}\n          </div>\n          <div className=\"saveStnDetails\">\n            {tmlSaveStnArray?.map((stn, i) => DictM.MtrStations[stn].tc_name)}\n          </div>\n          <div className=\"saveStnActions\">\n            {tmlSaveStnArray.length === 0 ? \"\" : \"Delete All\"}\n          </div>\n        </div>\n        <div className=\"settingRow\">\n          <div className=\"saveStnLine\">{DictL.lrtCommon.tc.lrt}</div>\n          <div className=\"saveStnCount\">\n            已儲存車站數目: {lrtSaveStnArray?.length}\n          </div>\n          <div className=\"saveStnDetails\">\n            {lrtSaveStnArray?.map((stn, i) => DictL.lrtStation.tc[stn])}\n          </div>\n          <div className=\"saveStnActions\">\n            {lrtSaveStnArray.length === 0 ? \"\" : \"Delete All\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n","/Users/leowong/Documents/JS/hk-transport-display/src/component/LRTSaveInfo.js",["90"],{"ruleId":"91","severity":1,"message":"92","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":10},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"91","severity":1,"message":"99","line":24,"column":8,"nodeType":"93","messageId":"94","endLine":24,"endColumn":20},{"ruleId":"91","severity":1,"message":"100","line":24,"column":9,"nodeType":"93","messageId":"94","endLine":24,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":732,"column":1,"nodeType":"103","endLine":738,"endColumn":3},{"ruleId":"104","severity":1,"message":"105","line":61,"column":6,"nodeType":"106","endLine":61,"endColumn":11,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":72,"column":6,"nodeType":"106","endLine":72,"endColumn":21,"suggestions":"109"},{"ruleId":"101","severity":1,"message":"102","line":461,"column":1,"nodeType":"103","endLine":461,"endColumn":50},{"ruleId":"91","severity":1,"message":"110","line":22,"column":20,"nodeType":"93","messageId":"94","endLine":22,"endColumn":31},{"ruleId":"111","severity":1,"message":"112","line":26,"column":15,"nodeType":"113","messageId":"114","endLine":26,"endColumn":17},{"ruleId":"91","severity":1,"message":"115","line":9,"column":8,"nodeType":"93","messageId":"94","endLine":9,"endColumn":31},{"ruleId":"91","severity":1,"message":"116","line":9,"column":10,"nodeType":"93","messageId":"94","endLine":9,"endColumn":24},{"ruleId":"91","severity":1,"message":"117","line":11,"column":9,"nodeType":"93","messageId":"94","endLine":11,"endColumn":24},{"ruleId":"104","severity":1,"message":"118","line":22,"column":6,"nodeType":"106","endLine":22,"endColumn":8,"suggestions":"119"},{"ruleId":"91","severity":1,"message":"100","line":18,"column":9,"nodeType":"93","messageId":"94","endLine":18,"endColumn":24},"no-unused-vars","'TT' is defined but never used.","Identifier","unusedVar","no-native-reassign",["120"],"no-negated-in-lhs",["121"],"'SettingsIcon' is defined but never used.","'lrtStationArray' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lrtStationArray'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useEffect has a missing dependency: 'saveStationsArray'. Either include it or remove the dependency array.",["123"],"'setSwapLang' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'TimelineOppositeContent' is defined but never used.","'haveLrtRecords' is assigned a value but never used.","'wrlSaveStnArray' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'storage'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [lrtStationArray, sid]",{"range":"131","text":"132"},"Update the dependencies array to be: [line, saveStationsArray, station]",{"range":"133","text":"134"},"Update the dependencies array to be: [storage]",{"range":"135","text":"136"},[1855,1860],"[lrtStationArray, sid]",[2528,2543],"[line, saveStationsArray, station]",[830,832],"[storage]"]